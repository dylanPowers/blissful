#! /usr/bin/env bash

set -e

echo \
"Warning! This script isn't complete yet. In particular the interactive
installation mode doesn't work yet.
"

install_dart_root() {
  type apt-get &>/dev/null
  if [ $? -ne 0 ]; then
    echo "This system doesn't have the apt package manager. I don't know what to do."
    echo "Maybe you should modify this script to add support for additional package managers???"
    exit
  fi

  packages_to_install="git openssh-client apt-transport-https"
  sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get install $packages_to_install

  if ! type dart &>/dev/null; then
    # Curtesy of https://www.dartlang.org/install/linux
    sudo sh -c 'curl https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -'
    sudo sh -c 'curl \
      https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list \
      > \
      /etc/apt/sources.list.d/dart_stable.list'

    sudo apt-get update && sudo apt-get install dart
  fi

  if ! type pub &>/dev/null; then
    sudo ln -s /usr/lib/dart/bin/pub /usr/local/bin/pub
  fi
}

install_dart_local() {
  SHA256="f774330896e60df918848075f3f1d9ada414bcce4fe81504e2646a79536eb333"
  VERSION="1.24.2"
  ZIP_LOCATION="$HOME/Downloads/dartsdk-linux-x64-release.zip"
  INSTALL_LOCATION="$HOME/.local/lib"

  mkdir -p "$HOME/Downloads"
  mkdir -p "$INSTALL_LOCATION"
  mkdir -p "$HOME/bin"

  curl \
    -o "$ZIP_LOCATION" \
    https://storage.googleapis.com/dart-archive/channels/stable/release/$VERSION/sdk/dartsdk-linux-x64-release.zip
  hash=$(sha256sum $HOME/Downloads/dartsdk-linux-x64-release.zip | awk '{ print $1 }')
  [[ $hash == $SHA256 ]] || (echo -e "SHA256 sum failed.\n\tExpected:\t$SHA256\n\tGot:\t\t$hash" && exit 1)

  unzip "$ZIP_LOCATION" -d "$INSTALL_LOCATION"

  ln -s "$INSTALL_LOCATION/dart-sdk/bin/dart" "$HOME/bin/dart"
  ln -s "$INSTALL_LOCATION/dart-sdk/bin/pub"  "$HOME/bin/pub"
}


if ! type dart &>/dev/null || ! type pub &>/dev/null; then
  while true; do
    read -p "Obtain root to install dart (otherwise does a local install)? " root_install
    case $root_install in
      [yY] | yes)
        install_dart_root
        break;;
      [nN] | no)
        echo "OK, installing dart locally then"
        sleep 2
        install_dart_local
        break;;
    esac
  done
fi

pub global activate --source path .
export PATH="$PATH":"~/.pub-cache/bin"

echo
if [ ! -f ~/.ssh/id_rsa.pub ]; then
  echo "Hmmmm, no ssh keys. We'll make one then"
  echo
  ssh-keygen -t rsa
fi

echo "********************************************************************"
echo "Make sure the following ssh key is available to your github account:"
cat ~/.ssh/id_rsa.pub

github_user=''
repo_name=".bliss"
install_dir=''
request_github_info() {
  echo
  read -p "Enter your github username [$github_user]: " github_user

  read -p "Repo name [$repo_name]: " repo_name_in
  if [[ ! -z repo_name_in ]]; then repo_name="$repo_name_in"; fi

  install_dir="$repo_name"
  read -p "Install dir \$HOME/[$install_dir]: " install_dir_in
  if [[ ! -z $install_dir_in ]]; then install_dir="$install_dir_in"; fi
  install_dir="$HOME/$install_dir"

  github_url="git@github.com:$github_user/$repo_name.git"
  echo
}

continue='n'
while [[ $continue != 'y' ]]; do
  request_github_info
  read -p "Clone $github_url into $install_dir? (y/n): " continue
done

checkout_git_dep() { install_dir=$1; remote=$2; version=$3
  if [[ ! -d $install_dir/.git ]]; then
    mkdir -p $install_dir
    git clone "$remote" "$install_dir"
    pushd "$install_dir" > /dev/null
  else
    pushd "$install_dir" > /dev/null
    git fetch "$remote"
  fi

  if ! git log --pretty=oneline --decorate -n 1 | grep -q "$version"; then
    git checkout "$version"
  fi
  popd > /dev/null
}

checkout_git_dep $install_dir $github_url master
chmod -R o-rwx $install_dir
cd $install_dir

# Doesn't actually work yet
blissful --interactive
