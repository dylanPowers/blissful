#!/bin/bash

set -e

echo "Warning! This script isn't complete yet and a little untested!"
#set -x
#exit 1

type apt-get &>/dev/null
if [ $? -ne 0 ]; then 
  echo "This system doesn't have the apt package manager. I don't know what to do."
  echo "Maybe you should modify this script to add support for additional package managers???"
  exit
fi

packages_to_install="git openssh-client apt-transport-https"
sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get install $packages_to_install

if ! type dart &>/dev/null; then
  # Curtesy of https://www.dartlang.org/install/linux
  sudo sh -c 'curl https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -'
  sudo sh -c 'curl \
    https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list \
    > \
    /etc/apt/sources.list.d/dart_stable.list'

  sudo apt-get update && sudo apt-get install dart
fi

if ! type pub &>/dev/null; then
	sudo ln -s /usr/lib/dart/bin/pub /usr/local/bin/pub
fi

pub global activate --source path .
export PATH="$PATH":"~/.pub-cache/bin"

echo
if [ ! -f ~/.ssh/id_rsa.pub ]; then
  echo "Hmmmm, no ssh keys. We'll make one then"
  echo
  ssh-keygen -t rsa
fi

echo "********************************************************************"
echo "Make sure the following ssh key is available to your github account:"
cat ~/.ssh/id_rsa.pub

github_user=''
repo_name=".bliss"
install_dir=''
request_github_info() {
  echo
  read -p "Enter your github username [$github_user]: " github_user

  read -p "Repo name [$repo_name]: " repo_name_in
  if [[ ! -z repo_name_in ]]; then repo_name="$repo_name_in"; fi

  install_dir="$repo_name"
  read -p "Install dir \$HOME/[$install_dir]: " install_dir_in
  if [[ ! -z $install_dir_in ]]; then install_dir="$install_dir_in"; fi
  install_dir="$HOME/$install_dir"

  github_url="git@github.com:$github_user/$repo_name.git"
  echo
}

continue='n'
while [[ $continue != 'y' ]]; do
  request_github_info
  read -p "Clone $github_url into $install_dir? (y/n): " continue
done

checkout_git_dep() { install_dir=$1; remote=$2; version=$3
  if [[ ! -d $install_dir/.git ]]; then
    mkdir -p $install_dir
    git clone "$remote" "$install_dir"
    pushd "$install_dir" > /dev/null
  else
    pushd "$install_dir" > /dev/null
    git fetch "$remote"
  fi

  if ! git log --pretty=oneline --decorate -n 1 | grep -q "$version"; then
    git checkout "$version"
  fi
  popd > /dev/null
}

checkout_git_dep $install_dir $github_url master
chmod -R 770 $install_dir
cd $install_dir

blissful --interactive
